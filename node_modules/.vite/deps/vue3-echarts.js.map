{
  "version": 3,
  "sources": ["../../vue3-echarts/index.ts"],
  "sourcesContent": ["import * as echarts from 'echarts';\nimport type { EChartsOption } from 'echarts';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport { capitalize, defineComponent, h, type PropType } from 'vue';\n\n// https://echarts.apache.org/zh/api.html#events\nconst Events = [\n  'click',\n  'dblclick',\n  'mousedown',\n  'mouseup',\n  'mouseover',\n  'mouseout',\n  'globalout',\n\n  'legendselectchanged',\n  'legendselected',\n  'legendunselected',\n  'legendscroll',\n  'datazoom',\n  'datarangeselected',\n  'timelinechanged',\n  'timelineplaychanged',\n  'restore',\n  'dataviewchanged',\n  'magictypechanged',\n  'geoselectchanged',\n  'geoselected',\n  'geounselected',\n  'pieselectchanged',\n  'pieselected',\n  'pieunselected',\n  'mapselectchanged',\n  'mapselected',\n  'mapunselected',\n  'axisareaselected',\n  'focusnodeadjacency',\n  'unfocusnodeadjacency',\n  'brush',\n  'brushselected',\n];\n\ntype EchartsInstance = ReturnType<typeof echarts.init>;\n\nexport const VueEcharts = defineComponent({\n  name: 'VueEcharts',\n\n  props: {\n    option: {\n      type: Object as PropType<EChartsOption>,\n    },\n    theme: {\n      type: String,\n      default: 'default',\n    },\n    groupId: {\n      type: String,\n      default: null,\n    },\n    loadingOption: {\n      type: Object,\n      default: () => ({\n        text: 'Loading...',\n        color: '#c23531',\n        textColor: '#489CFF',\n        spinnerRadius: 6,\n        lineWidth: 2,\n        maskColor: 'rgba(0, 0, 0, 0.1)',\n        zlevel: 0,\n      }),\n    },\n    initCfg: Object as PropType<Parameters<typeof echarts.init>[2]>,\n  },\n\n  emits: Events,\n\n  watch: {\n    option: 'refreshOption',\n    theme: 'refreshChart',\n  },\n\n  mounted() {\n    this.refreshChart();\n    this.$el._component = this;\n    if (!VueEcharts._ro) {\n      VueEcharts._ro = new ResizeObserver(function (this: void, entries) {\n        entries.forEach(entry => {\n          const that = (entry.target as HTMLDivElement & { _component: any })._component;\n          if (entry.contentRect.width && entry.contentRect.height && that.chart && !that.resizing) {\n            that.resizing = true;\n            requestAnimationFrame(() => {\n              if (that.chart) that.chart.resize(entry.contentRect);\n              that.resizing = false;\n            });\n          }\n        });\n      });\n    }\n\n    VueEcharts._ro.observe(this.$el);\n  },\n\n  beforeUnmount() {\n    if (this.chart) {\n      this.chart.dispose();\n      this.chart = undefined;\n    }\n    VueEcharts._ro?.unobserve(this.$el);\n  },\n\n  methods: {\n    setOption(...args: Parameters<EchartsInstance['setOption']>) {\n      return this.chart.setOption(...args);\n    },\n    dispatchAction(...args: Parameters<EchartsInstance['dispatchAction']>) {\n      return this.chart.dispatchAction(...args);\n    },\n    refreshChart() {\n      if (this.chart) {\n        this.chart.dispose();\n        this.chart = undefined;\n      }\n\n      const chart = echarts.init(this.$el, this.theme, this.initCfg);\n      chart.group = this.groupId;\n\n      this.chart = chart;\n\n      this.refreshOption();\n\n      Events.forEach(x => {\n        const eventName = 'on' + capitalize(x);\n        if (typeof this.$.vnode.props[eventName] === 'function') {\n          chart.on(x, this.$emit.bind(this, x));\n        }\n      });\n    },\n    refreshOption() {\n      if (!this.chart) return;\n      if (this.option && Object.keys(this.option).some(x => /^[a-z]/.test(x))) {\n        this.chart.setOption(this.option, true);\n        if (this.$el.clientHeight) {\n          this.chart.resize({\n            width: this.$el.clientWidth,\n            height: this.$el.clientHeight,\n          });\n        }\n        this.chart.hideLoading();\n      } else {\n        this.chart.showLoading('default', this.loadingOption);\n      }\n    },\n    getInstance() {\n      return this.chart as EchartsInstance;\n    },\n  },\n\n  render() {\n    return h('div', { class: 'vue-echarts' });\n  },\n});\n"],
  "mappings": ";;;;;;;;;;;;AAIA,IAAM,SAAS;EACb;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;AAKK,IAAM,aAAa,gBAAgB;EACxC,MAAM;EAEN,OAAO;IACL,QAAQ;MACN,MAAM;;IAER,OAAO;MACL,MAAM;MACN,SAAS;;IAEX,SAAS;MACP,MAAM;MACN,SAAS;;IAEX,eAAe;MACb,MAAM;MACN,SAAS,OAAO;QACd,MAAM;QACN,OAAO;QACP,WAAW;QACX,eAAe;QACf,WAAW;QACX,WAAW;QACX,QAAQ;;;IAGZ,SAAS;;EAGX,OAAO;EAEP,OAAO;IACL,QAAQ;IACR,OAAO;;EAGT,UAAO;AACL,SAAK,aAAY;AACjB,SAAK,IAAI,aAAa;AACtB,QAAI,CAAC,WAAW,KAAK;AACnB,iBAAW,MAAM,IAAI,eAAe,SAAsB,SAAO;AAC/D,gBAAQ,QAAQ,WAAQ;AACtB,gBAAM,OAAQ,MAAM,OAAgD;AACpE,cAAI,MAAM,YAAY,SAAS,MAAM,YAAY,UAAU,KAAK,SAAS,CAAC,KAAK,UAAU;AACvF,iBAAK,WAAW;AAChB,kCAAsB,MAAK;AACzB,kBAAI,KAAK;AAAO,qBAAK,MAAM,OAAO,MAAM,WAAW;AACnD,mBAAK,WAAW;YAClB,CAAC;;QAEL,CAAC;MACH,CAAC;;AAGH,eAAW,IAAI,QAAQ,KAAK,GAAG;EACjC;EAEA,gBAAa;;AACX,QAAI,KAAK,OAAO;AACd,WAAK,MAAM,QAAO;AAClB,WAAK,QAAQ;;AAEf,KAAA,KAAA,WAAW,SAAG,QAAA,OAAA,SAAA,SAAA,GAAE,UAAU,KAAK,GAAG;EACpC;EAEA,SAAS;IACP,aAAa,MAA8C;AACzD,aAAO,KAAK,MAAM,UAAU,GAAG,IAAI;IACrC;IACA,kBAAkB,MAAmD;AACnE,aAAO,KAAK,MAAM,eAAe,GAAG,IAAI;IAC1C;IACA,eAAY;AACV,UAAI,KAAK,OAAO;AACd,aAAK,MAAM,QAAO;AAClB,aAAK,QAAQ;;AAGf,YAAM,QAAgB,KAAK,KAAK,KAAK,KAAK,OAAO,KAAK,OAAO;AAC7D,YAAM,QAAQ,KAAK;AAEnB,WAAK,QAAQ;AAEb,WAAK,cAAa;AAElB,aAAO,QAAQ,OAAI;AACjB,cAAM,YAAY,OAAO,WAAW,CAAC;AACrC,YAAI,OAAO,KAAK,EAAE,MAAM,MAAM,SAAS,MAAM,YAAY;AACvD,gBAAM,GAAG,GAAG,KAAK,MAAM,KAAK,MAAM,CAAC,CAAC;;MAExC,CAAC;IACH;IACA,gBAAa;AACX,UAAI,CAAC,KAAK;AAAO;AACjB,UAAI,KAAK,UAAU,OAAO,KAAK,KAAK,MAAM,EAAE,KAAK,OAAK,SAAS,KAAK,CAAC,CAAC,GAAG;AACvE,aAAK,MAAM,UAAU,KAAK,QAAQ,IAAI;AACtC,YAAI,KAAK,IAAI,cAAc;AACzB,eAAK,MAAM,OAAO;YAChB,OAAO,KAAK,IAAI;YAChB,QAAQ,KAAK,IAAI;WAClB;;AAEH,aAAK,MAAM,YAAW;aACjB;AACL,aAAK,MAAM,YAAY,WAAW,KAAK,aAAa;;IAExD;IACA,cAAW;AACT,aAAO,KAAK;IACd;;EAGF,SAAM;AACJ,WAAO,EAAE,OAAO,EAAE,OAAO,cAAa,CAAE;EAC1C;CACD;",
  "names": []
}
