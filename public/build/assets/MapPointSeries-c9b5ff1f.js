import{E as D,d as v,e as f,i as b,f as w,r as N}from"./AnimatedTheme-60f9fbb6.js";class P extends D{constructor(){super(...arguments),Object.defineProperty(this,"_index",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"series",{enumerable:!0,configurable:!0,writable:!0,value:void 0})}_afterNew(){super._afterNewApplyThemes()}_beforeChanged(){if(super._beforeChanged(),this.isDirty("sprite")){const t=this.get("sprite");t&&(t.setAll({position:"absolute",role:"figure"}),this._disposers.push(t))}(this.isDirty("locationX")||this.isDirty("locationY"))&&this.series&&this.series._positionBullet(this)}}Object.defineProperty(P,"className",{enumerable:!0,configurable:!0,writable:!0,value:"Bullet"});Object.defineProperty(P,"classNames",{enumerable:!0,configurable:!0,writable:!0,value:D.classNames.concat([P.className])});class _ extends v{constructor(){super(...arguments),Object.defineProperty(this,"_types",{enumerable:!0,configurable:!0,writable:!0,value:["Point","MultiPoint"]}),Object.defineProperty(this,"_lineChangedDp",{enumerable:!0,configurable:!0,writable:!0,value:void 0})}_afterNew(){this.fields.push("polygonId","lineId","longitude","latitude","fixed"),super._afterNew()}markDirtyProjection(){this.markDirty()}markDirtyValues(t){super.markDirtyValues(),t&&this._positionBullets(t)}processDataItem(t){super.processDataItem(t);let i=t.get("geometry");if(!i)i={type:"Point",coordinates:[t.get("longitude",0),t.get("latitude",0)]},t.set("geometry",i);else if(i.type=="Point"){const e=i.coordinates;e&&(t.set("longitude",e[0]),t.set("latitude",e[1]))}else if(i.type=="MultiPoint"){const e=i.coordinates;e&&e[0]&&(t.set("longitude",e[0][0]),t.set("latitude",e[0][1]))}this._addGeometry(i,this)}_makeBullets(t){t.bullets=[],this.bullets.each(i=>{const e=t.get("geometry");if(e){if(e.type=="Point")this._setBulletParent(this._makeBullet(t,i));else if(e.type="MultiPoint"){let s=0;f(e.coordinates,()=>{this._setBulletParent(this._makeBullet(t,i,s)),s++})}}})}_setBulletParent(t){if(t){const i=t.get("sprite"),e=this.chart;if(i&&e){const s=i.dataItem;s&&(s.get("fixed")?i.parent!=e.bulletsContainer&&e.bulletsContainer.children.moveValue(i):i.parent!=this.bulletsContainer&&this.bulletsContainer.children.moveValue(i))}}}_positionBullet(t){const i=t.get("sprite");if(i){const e=i.dataItem;if(e&&e.get("fixed"))return;const s=e.get("latitude"),n=e.get("longitude"),l=e.get("lineDataItem"),m=e.get("fixed"),r=this.chart;let a;if(l)a=l.get("mapLine");else{const o=e.get("lineId");o&&r&&r.series.each(u=>{if(u.isType("MapLineSeries")){let c=u.getDataItemById(o);c&&(e.set("lineDataItem",c),a=c.get("mapLine"))}})}this._lineChangedDp&&this._lineChangedDp.dispose(),a&&(this._lineChangedDp=a.events.on("linechanged",()=>{this._positionBullets(e)}));const d=e.get("polygonDataItem");let p;if(d)p=d.get("mapPolygon");else{const o=e.get("polygonId");o&&r&&r.series.each(u=>{if(u.isType("MapPolygonSeries")){let c=u.getDataItemById(o);c&&(e.set("polygonDataItem",c),p=c.get("mapPolygon"))}})}const h=e.get("positionOnLine");let g,y;if(p){let o=p.visualCentroid();g=[o.longitude,o.latitude],e.setRaw("longitude",o.longitude),e.setRaw("latitude",o.latitude)}else if(a&&b(h)){let o=a.positionToGeoPoint(h);if(g=[o.longitude,o.latitude],e.get("autoRotate",t.get("autoRotate"))&&r){const u=a.positionToGeoPoint(h-.002),c=a.positionToGeoPoint(h+.002),B=r.convert(u),x=r.convert(c);y=w(B,x)}e.setRaw("longitude",o.longitude),e.setRaw("latitude",o.latitude)}else if(b(n)&&b(s))g=[n,s];else{const o=e.get("geometry");if(o){if(o.type=="Point")this._positionBulletReal(t,o,o.coordinates,y);else if(o.type=="MultiPoint"){let u=t._index||0;g=o.coordinates[u]}}}!m&&g&&this._positionBulletReal(t,{type:"Point",coordinates:g},g,y)}}_positionBulletReal(t,i,e,s){const n=t.get("sprite"),l=this.chart;if(l){const m=l.get("projection"),r=l.getPrivate("geoPath"),a=n.dataItem,d=m(e);d&&n.setAll({x:d[0],y:d[1]});let p=!0;r(i)?this.get("clipFront")&&(p=!1):this.get("clipBack")&&(p=!1),n.setPrivate("visible",p),a&&s!=null&&a.get("autoRotate",t.get("autoRotate"))&&n.set("rotation",s+a.get("autoRotateAngle",t.get("autoRotateAngle",0)))}}zoomToDataItem(t,i,e){const s=this.chart;if(s){const n=t.get("longitude",0),l=t.get("latitude",0);return e?s.zoomToGeoPoint({longitude:n,latitude:l},i,!0,void 0,-n,-l):s.zoomToGeoPoint({longitude:n,latitude:l},i,!0)}}disposeDataItem(t){const i=this.chart;i&&i.series.each(e=>{e.isType("MapLineSeries")&&f(e.dataItems,s=>{const n=s.get("pointsToConnect");n&&f(n,l=>{l==t&&(N(n,l),e.markDirtyValues(s))})})}),super.disposeDataItem(t)}_excludeDataItem(t){super._excludeDataItem(t);const i=t.bullets;i&&f(i,e=>{const s=e.get("sprite");s&&s.setPrivate("visible",!1)})}_unexcludeDataItem(t){super._unexcludeDataItem(t);const i=t.bullets;i&&f(i,e=>{const s=e.get("sprite");s&&s.setPrivate("visible",!0)})}_notIncludeDataItem(t){super._notIncludeDataItem(t);const i=t.bullets;i&&f(i,e=>{const s=e.get("sprite");s&&s.setPrivate("visible",!1)})}_unNotIncludeDataItem(t){super._unNotIncludeDataItem(t);const i=t.bullets;i&&f(i,e=>{const s=e.get("sprite");s&&s.setPrivate("visible",!0)})}}Object.defineProperty(_,"className",{enumerable:!0,configurable:!0,writable:!0,value:"MapPointSeries"});Object.defineProperty(_,"classNames",{enumerable:!0,configurable:!0,writable:!0,value:v.classNames.concat([_.className])});export{P as B,_ as M};
